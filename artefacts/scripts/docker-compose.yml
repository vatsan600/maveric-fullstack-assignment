#gateway doesn't work in docker. always routes to localhost when discovering through service discovery
#in docker. in local it works fine. issue happens for feign clients also. eureka gives localhost.

version: '0.0.1'
services:
  eureka-service:
    container_name: eureka-service
    build:
      context: ../../services/eureka-service
      dockerfile: ./Dockerfile
    image: eureka-service:latest
    ports:
      - 8761:8761
    expose:
      - '8761'
    networks:
      - spring-cloud-network
    environment:
      - eureka.instance.instance-id=
  gateway-service:
    container_name: gateway-service
    build:
      context: ../../services/gateway-service
      dockerfile: ./Dockerfile
    image: gateway-service:latest
    ports:
      - 8000:8000
    networks:
    - spring-cloud-network
    environment:
      - eureka.client.service-url.defaultZone=http://eureka-service:8761/eureka
      - eureka.instance.hostname=gateway-service
      - spring.cloud.gateway.discovery.locator.lower-case-service-id=true
      - eureka.instance.prefer-ip-address=true
  user-service:
    container_name: user-service
    build:
      context: ../../services/user-service
      dockerfile: ./Dockerfile
    image: user-service:latest
    ports:
      - 3005:3005
    networks:
    - spring-cloud-network
    environment:
      - eureka.client.service-url.defaultZone=http://eureka-service:8761/eureka
      - spring.datasource.url=jdbc:mysql://mysqldb:3306/maveric-bank?allowPublicKeyRetrieval=true&useSSL=false
      - eureka.instance.hostname=user-service
      - eureka.instance.prefer-ip-address=true
    depends_on:
      - mysqldb
      - eureka-service
  account-service:
    container_name: account-service
    build:
      context: ../../services/account-service
      dockerfile: ./Dockerfile
    image: account-service:latest
    ports:
      - 3010:3010
    networks:
    - spring-cloud-network
    environment:
      - eureka.client.service-url.defaultZone=http://eureka-service:8761/eureka
      - spring.datasource.url=jdbc:mysql://mysqldb:3306/maveric-bank?allowPublicKeyRetrieval=true&useSSL=false
      - eureka.instance.hostname=account-service
      - eureka.instance.prefer-ip-address=true
    depends_on:
      - mysqldb
      - eureka-service
  balance-service:
    container_name: balance-service
    build:
      context: ../../services/balance-service
      dockerfile: ./Dockerfile
    image: balance-service:latest
    ports:
      - 3015:3015
    networks:
    - spring-cloud-network
    environment:
      - eureka.client.service-url.defaultZone=http://eureka-service:8761/eureka
      - spring.datasource.url=jdbc:mysql://mysqldb:3306/maveric-bank?allowPublicKeyRetrieval=true&useSSL=false
      - eureka.instance.hostname=balance-service
      - eureka.instance.prefer-ip-address=true
    depends_on:
      - mysqldb
      - eureka-service
  transaction-service:
    container_name: transaction-service
    build:
      context: ../../services/trasaction-service
      dockerfile: ./Dockerfile
    image: transaction-service:latest
    ports:
      - 3020:3020
    networks:
    - spring-cloud-network
    environment:
      - eureka.client.service-url.defaultZone=http://eureka-service:8761/eureka
      - spring.datasource.url=jdbc:mysql://mysqldb:3306/maveric-bank?allowPublicKeyRetrieval=true&useSSL=false
      - eureka.instance.hostname=transaction-service
      - eureka.instance.prefer-ip-address=true
    depends_on:
      - mysqldb
      - eureka-service
  maveric-bank-webapp:
    container_name: maveric-bank-webapp
    build:
      context: ../../maveric-bank-webapp/maveric-bank
      dockerfile: ./Dockerfile
    image: maveric-bank-webapp:latest
    ports:
      - 8080:8080
    networks:
    - spring-cloud-network
  mysqldb:
    container_name: mysqldb
    image: mysql:latest
    restart: always
    environment:
      MYSQL_DATABASE: 'maveric-bank'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - my-db:/var/lib/mysql
    networks:
    - spring-cloud-network
volumes:
  my-db:
networks:
    spring-cloud-network:
        driver: bridge